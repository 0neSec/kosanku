  datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
  }

  generator client {
    provider = "prisma-client-js"
  }

  // Enum for User Roles
  enum UserRole {
    ADMIN
    USER
  }

  // User Model
  model User {
    id          String    @id @default(cuid())
    name        String    @db.VarChar(100)
    email       String    @unique @db.VarChar(100)
    password    String    @db.VarChar(255)
    noWa        String    @unique @db.VarChar(15)
    
    // Wilayah (Region) Fields
    desa        String?   @db.VarChar(100)
    kecamatan   String?   @db.VarChar(100)
    kabupaten   String?   @db.VarChar(100)
    
    role        UserRole  @default(USER)
    
    // Relationships
    kosan       Kosan[]
    
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([email])
    @@index([role])
  }

  // Kosan (Boarding House) Model
  model Kosan {
    id            String      @id @default(cuid())
    pemilikId     String
    pemilik       User        @relation(fields: [pemilikId], references: [id], onDelete: Cascade)
    
    namaKosan     String      @db.VarChar(100)
    alamat        String      @db.VarChar(255)
    noWa          String      @db.VarChar(15)
    
    // Image Relationship
    imageId       String?     @unique
    image         Image?      @relation(fields: [imageId], references: [id], onDelete: SetNull)
    
    // Relationships
    kamar         Kamar[]
    
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@index([pemilikId])
    @@index([imageId])
  }

  // Kamar (Room) Model
  model Kamar {
    id           String       @id @default(cuid())
    kosanId      String
    kosan        Kosan        @relation(fields: [kosanId], references: [id], onDelete: Cascade)
    
    nomorKamar   String       @db.VarChar(20)
    kapasitas    Int          @default(1)
    harga        Decimal      @db.Decimal(10, 2)
    
    // Image Relationship
    imageId      String?      @unique
    image        Image?       @relation(fields: [imageId], references: [id], onDelete: SetNull)
    
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    @@index([kosanId])
    @@index([imageId])
    @@unique([kosanId, nomorKamar])
  }

  // Image Model
  model Image {
    id          String    @id @default(cuid())
    name        String    @db.VarChar(255)
    file        String    @db.Text  // Could be a file path or URL
    
    // Reverse relationships
    kosan       Kosan?
    kamar       Kamar?
    
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
  }

